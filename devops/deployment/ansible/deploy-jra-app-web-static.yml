---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: tag_environment_{{ env }}:&tag_swarm_instance_type_swarm_manager
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# Deploy the Docker Registy service
- hosts: swarm_manager_operational[0]
  become: true
  tasks:
    - name: remove jarch-infra-docker-registry service if it exists (ignore failure if it does not exist)
      shell: >
        docker service jarch-site-web-static
      ignore_errors: yes

    - name: deploy docker registry service
      shell: >
        docker service create
        --name jarch-site-web-static
        --publish 8080:8080
        --replicas=3
        --network jarch-proxy-traefik-network
        --constraint 'node.labels.swarm-node-type == app-ui-web'
        --label traefik.docker.network=jarch-proxy-traefik-network
        --label traefik.port=8080
        --label traefik.frontend.rule=Host:www.joericearchitect.com
        --label environment-flip=blue
        --label application-name=jarch-site-web-static
        --label container-name=jarch-site-web-static
        joericearchitect/jarch-site-web-static
